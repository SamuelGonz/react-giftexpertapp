{"version":3,"sources":["Components/AddCategory.js","helpers/getGifs.js","Components/GifGridItem.js","Components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","reportWebVitals.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","prototype","handleAdd","PropTypes","func","isRequired","getGifs","category","a","url","encodeURI","fetch","respuesta","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","catch","console","log","useFetchGifs","GifExpertApp","categories","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oNAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACXC,mBAAS,IADE,mBACxCC,EADwC,KAC5BC,EAD4B,KAiB/C,OACG,sBAAMC,SAXY,SAACC,GACnBA,EAAEC,iBAEEJ,EAAWK,OAAOC,QAAU,IAGhCR,GAAc,SAACS,GAAD,OAAWP,GAAX,mBAA0BO,OACxCN,EAAc,MAId,SACG,uBAAOO,KAAK,OAAOC,MAAOT,EAAYU,SAhBlB,SAACP,GACxBF,EAAcE,EAAEQ,OAAOF,aAoB7BZ,EAAYe,UAAY,CACrBC,U,OAAWC,EAAUC,KAAKC,Y,mCC5BhBC,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACdC,EADc,iDACkCC,UACnDH,GAFiB,+DAIII,MAAMF,GAJV,cAIdG,EAJc,gBAKGA,EAAUC,OALb,uBAKZC,EALY,EAKZA,KAEFC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAC5B,MAAO,CACJC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAXpB,kBAebM,GAfa,4CAAH,sDCEPO,EAAc,SAAC,GAAoB,IAAlBH,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAClC,OACG,sBAAKc,UAAU,yCAAf,UACG,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCFAO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECDb,SAACA,GAAc,IAAD,EACbnB,mBAAS,CAChC0B,KAAM,GACNa,SAAS,IAH2B,mBAChCC,EADgC,KACzBC,EADyB,KAiBvC,OAXAC,qBAAU,WACPxB,EAAQC,GACJwB,MAAK,SAACC,GAAD,OACHH,EAAS,CACNf,KAAMkB,EACNL,SAAS,OAGdM,OAAM,kBAAMC,QAAQC,IAAI,6CAC5B,CAAC5B,IAEGqB,EDfmBQ,CAAa7B,GAA/BO,EAD8B,EAC9BA,KAAMa,EADwB,EACxBA,QAEd,OACG,qCACG,oBAAIJ,UAAU,oCAAd,SAAmDhB,IAElDoB,EAAU,cAAgB,eAC3B,qBAAKJ,UAAU,YAAf,SACIT,EAAKE,KAAI,SAACC,GAAD,OACP,cAAC,EAAD,eAA8BA,GAAZA,EAAIC,aEVxBmB,EAAe,WACzB,IAD+B,EAEKjD,mBADtB,CAAC,cADgB,mBAExBkD,EAFwB,KAEZnD,EAFY,KAI/B,OACG,qCACG,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAE5B,uBACA,6BACImD,EAAWtB,KAAI,SAACT,GAAD,OACb,cAAC,EAAD,CAASA,SAAUA,GAAeA,YCJlCgC,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBV,MAAK,YAAkD,IAA/CW,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,QCAdO,IAASC,OACN,cAAC,IAAMC,WAAP,UACG,cAAC,EAAD,MAEHC,SAASC,eAAe,SAM3BZ,M","file":"static/js/main.6015d835.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\n\nexport const AddCategory = ({ setCategories }) => {\n   const [inputValue, setInputValue] = useState(\"\");\n\n   const handleInputChange = (e) => {\n      setInputValue(e.target.value);\n   };\n\n   const handleSubmit = (e) => {\n      e.preventDefault();\n\n      if (inputValue.trim().length <= 2) {\n         return;\n      }\n      setCategories((cats) => [inputValue, ...cats]);\n      setInputValue(\"\");\n   };\n\n   return (\n      <form onSubmit={handleSubmit}>\n         <input type=\"text\" value={inputValue} onChange={handleInputChange} />\n      </form>\n   );\n};\n\nAddCategory.prototype = {\n   handleAdd: PropTypes.func.isRequired,\n};\n","export const getGifs = async (category) => {\n   const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(\n      category\n   )}&limit=10&api_key=Pj712JM4RiA2vHG5zM2D9RyUIoSzD8vh`;\n   const respuesta = await fetch(url);\n   const { data } = await respuesta.json();\n\n   const gifs = data.map((img) => {\n      return {\n         id: img.id,\n         title: img.title,\n         url: img.images?.downsized_medium.url,\n      };\n   });\n\n   return gifs;\n};\n","import React from \"react\";\n\nexport const GifGridItem = ({ title, url }) => {\n   return (\n      <div className=\"card animate__animated animate__fadeIn\">\n         <img src={url} alt={title} />\n         <p>{title}</p>\n      </div>\n   );\n};\n","import React from \"react\";\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\nimport { GifGridItem } from \"./GifGridItem\";\n\nexport const GifGrid = ({ category }) => {\n   const { data, loading } = useFetchGifs(category);\n\n   return (\n      <>\n         <h3 className=\"animate__animated animate__fadeIn\">{category}</h3>\n\n         {loading ? \"Cargando...\" : \"Data cargada\"}\n         <div className=\"card-grid\">\n            {data.map((img) => (\n               <GifGridItem key={img.id} {...img} />\n            ))}\n         </div>\n      </>\n   );\n};\n","import { useState, useEffect } from \"react\";\nimport { getGifs } from \"../helpers/getGifs\";\n\nexport const useFetchGifs = (category) => {\n   const [state, setState] = useState({\n      data: [],\n      loading: true,\n   });\n\n   useEffect(() => {\n      getGifs(category)\n         .then((imgs) =>\n            setState({\n               data: imgs,\n               loading: false,\n            })\n         )\n         .catch(() => console.log(\"Ocurrio algo con la peticion de gifs\"));\n   }, [category]);\n\n   return state;\n};\n","import React, { useState } from \"react\";\nimport { AddCategory } from \"./Components/AddCategory\";\nimport { GifGrid } from \"./Components/GifGrid\";\n\nexport const GifExpertApp = () => {\n   const lista = [\"One Punch\"];\n   const [categories, setCategories] = useState(lista);\n\n   return (\n      <>\n         <h2>GifExpertApp</h2>\n         <AddCategory setCategories={setCategories} />\n\n         <hr />\n         <ol>\n            {categories.map((category) => (\n               <GifGrid category={category} key={category} />\n            ))}\n         </ol>\n      </>\n   );\n};\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { GifExpertApp } from \"./GifExpertApp\";\n\nimport \"./index.css\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n   <React.StrictMode>\n      <GifExpertApp />\n   </React.StrictMode>,\n   document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}